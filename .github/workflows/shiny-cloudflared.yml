name: Shiny Cloudflared Tunnel

on:
  workflow_dispatch:
    inputs:
      trigger:
        description: 'Trigger for manual run'
        required: true
        default: 'manual'

env:
  TUNNEL_TOKEN: ${{ secrets.TUNNEL_TOKEN }}
  TUNNEL_ID: "84f79e3b-5caf-49e5-abd5-4b9dcbc08133"
  TUNNEL_DOMAIN: "enrich.bodagene.cn"

jobs:
  deploy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/seqyuan/shiny:1.0
      ports:
        - 8082:8082
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y jq curl

      - name: Install cloudflared
        run: |
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          dpkg -i cloudflared-linux-amd64.deb
          rm cloudflared-linux-amd64.deb

      - name: Start Shiny app
        run: |
          R -e "shiny::runApp('app.R', port = 8082, host = '0.0.0.0')" &
          sleep 10  # Wait for Shiny to start
          
          # Debug information
          echo "Checking process status..."
          ps aux | grep R
          echo "Checking network connections..."
          ss -tulpn | grep 8082 || true
          echo "Checking system info..."
          uname -a
          echo "Checking environment..."
          env | grep -v "TUNNEL_TOKEN" | sort
          
          # Verify Shiny app is running
          echo "Testing Shiny app connection..."
          curl -v http://localhost:8082 || true
          if ! curl -s http://localhost:8082 > /dev/null; then
            echo "Shiny app failed to start"
            exit 1
          fi
          echo "Shiny app is running"

      - name: Start tunnel and get URL
        id: tunnel
        run: |
          # Start tunnel in background with token (方案一)
          echo "Starting cloudflared tunnel..."
          cloudflared tunnel run --token $TUNNEL_TOKEN --url http://localhost:8082 &
          sleep 10  # Wait for tunnel to establish
          
          # Debug information
          echo "Checking tunnel status..."
          cloudflared tunnel info $TUNNEL_ID --token $TUNNEL_TOKEN || true
          echo "Checking tunnel connections..."
          ss -tulpn | grep cloudflared || true
          echo "Checking cloudflared process..."
          ps aux | grep cloudflared
          
          # Verify tunnel is working
          echo "Testing tunnel connection..."
          curl -v http://localhost:8082 || true
          if ! curl -s http://localhost:8082 > /dev/null; then
            echo "Tunnel failed to start"
            exit 1
          fi
          echo "Tunnel is running"
          
          # Use tunnel ID from environment variable
          echo "tunnel_id=$TUNNEL_ID" >> $GITHUB_OUTPUT
          
          # Use domain from environment variable
          TUNNEL_URL="https://$TUNNEL_DOMAIN"
          echo "tunnel_url=$TUNNEL_URL" >> $GITHUB_OUTPUT
          
          # Display tunnel information
          echo "Tunnel ID: $TUNNEL_ID"
          echo "Tunnel URL: $TUNNEL_URL"

      - name: Monitor Shiny activity
        run: |
          # Poll Shiny app every 5 minutes, and exit if no activity (no "200" response) for 20 minutes (4 consecutive failures).
          FAIL_COUNT=0
          while true; do
            if curl -s --head http://localhost:8082 | grep -q "200 OK"; then
              echo "Shiny app is active (200 OK). Resetting fail count."
              FAIL_COUNT=0
            else
              FAIL_COUNT=$(( FAIL_COUNT + 1 ))
              echo "Shiny app not active (fail count: $FAIL_COUNT)."
              if [ $FAIL_COUNT -ge 4 ]; then
                echo "Shiny app inactive for 20 minutes (4 consecutive failures). Stopping workflow."
                exit 0
              fi
            fi
            sleep 300  # sleep 5 minutes
          done

      - name: Keep the workflow running
        run: |
          tail -f /dev/null 